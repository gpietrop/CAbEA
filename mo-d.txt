ea.experiment(
  runs =
    (randomGenerator = (seed = [1:1:30]) * [ea.rg.defaultRG()]) *
    (solver = (nEval = [50000]) *
    (representation = [ea.r.intString()]) * [
      ea.s.ga(maxUniquenessAttempts = 0);
      ea.s.ga(name = "ga-33"; crossoverP = 0.33; maxUniquenessAttempts = 0);
      ea.s.nsga2(maxUniquenessAttempts = 0);
      ea.s.mapElites(name = "me-2"; descriptors = [
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 2; k = 0; list = ea.nf.asDoubleString())));
        ea.s.me.d.ofSolution(f = ea.nf.avg(collection = ea.nf.nthItems(n = 2; k = 1; list = ea.nf.asDoubleString())))
      ]);
      ea.s.cabea(name = "cabea-e-11"; crossoverP = 0.33; substrate = empty; gridSize = 11);
      ea.s.cabea(name = "cabea-cc-11"; crossoverP = 0.33; substrate = contour_cross; gridSize = 11);
      ea.s.cabea(name = "cabea-e-21"; crossoverP = 0.33; substrate = empty; gridSize = 21);
      ea.s.cabea(name = "cabea-cc-21"; crossoverP = 0.33; substrate = contour_cross; gridSize = 21)
    ]) * (problem = [
      ea.p.mhoProblem(mtProblem = ea.p.s.multiModalIntOneMax(nOfTargets = 2; p = 25));
      ea.p.mhoProblem(mtProblem = ea.p.s.multiModalIntOneMax(nOfTargets = 2; p = 100));
      ea.p.mhoProblem(mtProblem = ea.p.s.multiModalIntOneMax(nOfTargets = 2; p = 250))
    ]) * [
    ea.run()
  ];
  listeners = [
    ea.l.console(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%3d");
        ea.nf.bestFitness(f = ea.nf.nth(n = 0); s = "%4.2f");
        ea.nf.bestFitness(f = ea.nf.nth(n = 1); s = "%4.2f");
        ea.nf.max(collection = ea.nf.each(map = ea.nf.fitness(f = ea.nf.nth(n = 0)); collection = ea.nf.all()); s = "%4.2f");
        ea.nf.max(collection = ea.nf.each(map = ea.nf.fitness(f = ea.nf.nth(n = 1)); collection = ea.nf.all()); s = "%4.2f");
        ea.nf.hypervolume2D(
          collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.firsts());
          minReference = [0; 0];
          maxReference = [1; 1];
          s = "%4.2f"
        )
      ];
      runKeys = [
        ea.misc.sEntry(key = "solver"; value = "{solver.name}");
        ea.misc.sEntry(key = "problem"; value = "{problem.name}");
        ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}")
      ];
      onlyLast = true
    );
    ea.l.expPlotSaver(
      filePath = "results/mo-d-hv-vs-evals.png";
      w = 500; h = 1500;
      saveCsvDataMode = paper_friendly;
      freeScales = true;
      type = lines;
      plot = ea.plot.fitnessPlotMatrix(
        xFunction = ea.nf.quantized(f = ea.nf.evals(); r = 250; s = "%.0f");
        yFunction = ea.nf.hypervolume2D(
          collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.firsts());
          minReference = [0; 0];
          maxReference = [1; 1]
        )
      )
    );
    ea.l.expPlotSaver(
      filePath = "results/mo-d-hv-boxplot.png";
      w = 500; h = 1500;
      saveCsvDataMode = paper_friendly;
      freeScales = true;
      type = boxplot;
      plot = ea.plot.fitnessBoxplotMatrix(
        yFunction = ea.nf.hypervolume2D(
          collection = ea.nf.each(map = ea.nf.fitness(); collection = ea.nf.firsts());
          minReference = [0; 0];
          maxReference = [1; 1]
        )
      )
    );
    ea.l.runPlotSaver(
      w = 1000; h = 700;
      filePathTemplate = "results/grids-{problem.name}-{solver.name}-{randomGenerator.seed}.png";
      type = univariate_grid;
      saveCsvDataMode = paper_friendly;
      plot = ea.plot.gridPopulation(
        individualFunctions = [
          ea.nf.fitness(f = ea.nf.nth(n = 0));
          ea.nf.fitness(f = ea.nf.nth(n = 1))
        ];
        predicateValue = ea.nf.quantized(f = ea.nf.evals(); r = 1000; s = "%.0f");
        condition = ea.predicate.inD(
          values = [0; 5000; 10000; 15000; 25000; 50000]
        )
      );
      condition = ea.predicate.all(conditions = [
        ea.predicate.matches(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "solver"; value = "{solver.name}"));
          regex = "cabea.*"
        );
        ea.predicate.inS(
          f = ea.nf.runKey(runKey = ea.misc.sEntry(key = "seed"; value = "{randomGenerator.seed}"));
          values = ["1"; "2"; "3"]
        )
      ])
    )
  ]
)
